const TeleBot = require('telebot')
const mongoose = require('mongoose')

const bot = new TeleBot({
    token: '1907224811:AAFdUZ0GiBUv_xCE1cSmuufzT0TS4jXUD64', // Debug
    polling: {
        interval: 100,
        timeout: 0,
        limit: 100,
        retryTimeout: 500,
     //   proxy: 'http://HohrVp:6H8BY2@81.4.108.157:35357'
    }
});

const MONGO_URL = "mongodb://dbuÔøΩÔøΩÔøΩer:kUvbj3mXsÔøΩÔøΩÔøΩ3f@ds155325.mlab.com:1689/ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ";
mongoose.connect(MONGO_URL);

const UserSchema = { id: Number, name: String, username: String, ref: Number, ref_count: Number, balance: Number }
const User = mongoose.model('RefPay_users', UserSchema)

const a1 = 713883893
const a2 = 713883893

const start_text = "üöÄ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ–µ–∫—Ç RefPay!</b>\n\nüíµ –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –ø—Ä–µ–¥–µ–ª—å–Ω–æ –ø—Ä–æ—Å—Ç:\n–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ <b>–ø—Ä–∏–≥–ª–∞—à–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</b> –≤ –±–æ—Ç. –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –º—ã –ø–ª–∞—Ç–∏–º –ø–æ <b>25 –∫–æ–ø–µ–µ–∫</b>\n\nüí∞ –í—ã–≤–æ–¥ –æ—Ç <b>25 —Ä—É–±–ª–µ–π</b>\n\n‚ùóÔ∏è –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ:<b> –Ω–∞–∫—Ä—É—Ç–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞!</b>\n\nüí¨ <b>–ù–∞—à —á–∞—Ç:</b> @\n\nüë®‚Äçüíª <b>–ê–¥–º–∏–Ω:</b> @\n\n"

var state = [0]

var qiwi_n = [0]

function roundPlus(x) {
    if (isNaN(x)) return false;
    var m = Math.pow(10, 2);
    return Math.round(x * m) / m;
}

function addBal(user_id, sum) { User.findOneAndUpdate({ id: user_id }, { $inc: { balance: sum } }).then((e) => { }) }
function addRef(user_id) { User.findOneAndUpdate({ id: user_id }, { $inc: { ref_count: 1 } }).then((e) => { }) }
async function getBal(user_id) { var user = await User.findOne({ id: user_id });console.log(user_id); return user.balance }

var mm_total;
var mm_i;
var mm_mchatid;
var mm_mmsgid;
var mm_status = false;
var mm_amsgid;


var timerId = setInterval(async function () {
    if (mm_status) {
        try {
            let isUser = await User.find({}).skip(mm_i).limit(1);
            await bot.forwardMessage(isUser[0].id, mm_mchatid, mm_mmsgid).then((err) => { console.log(err)}).catch((err) => { console.log(err)})
			console.log(isUser[0].id, mm_mchatid, mm_mmsgid)
            console.log(mm_i + ') ID' + isUser[0].id)
            isUser = undefined
            mm_i++;
            if (mm_i % 10 == 0) {
                var tek = Math.round((mm_i / mm_total) * 40)
                var str = ""
                for (var i = 0; i < tek; i++)
                    str += "+"
                str += '>'
                for (var i = tek+1; i < 41; i++)
                    str += "-"
                bot.editMessageText({ chatId: a1, messageId: mm_amsgid }, "–í—ã–ø–æ–ª–Ω–µ–Ω–æ: " + mm_i + '/' + mm_total + ' - ' + Math.round((mm_i / mm_total) * 100) + '%\n' + str)
            }
            if (mm_i == mm_total) {
                mm_status = false;
                bot.editMessageText({ chatId: a1, messageId: mm_amsgid }, "–í—ã–ø–æ–ª–Ω–µ–Ω–æ: " + mm_i + '/' + mm_total)
                bot.sendMessage(a1, '–°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ ' + mm_i + ' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!', { replyMarkup: RM_admin })
                bot.sendMessage(a2, '–°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ ' + mm_i + ' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!', { replyMarkup: RM_admin })
            }
        } finally { }
    }
}, 100);

async function mm(mchatid, mmsgid, amsgid) {
    mm_total = await User.count({})
    mm_i = 0;
    mm_mchatid = mchatid;
    mm_mmsgid = mmsgid;
    mm_status = true;
    mm_amsgid = amsgid;
}

const RM_default = bot.keyboard([
    [bot.button('üöÄ –ó–∞—Ä–∞–±–æ—Ç–æ–∫')],
    [bot.button('üí∞ –ë–∞–ª–∞–Ω—Å'), bot.button('üìä C—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')],
    [bot.button('üì¢ –†–µ–∫–ª–∞–º–∞'), bot.button('üí¨ –ù–∞—à —á–∞—Ç')]
], { resize: true });

const RM_admin = bot.inlineKeyboard([
    [bot.inlineButton('–†–∞—Å—Å—ã–ª–∫–∞', { callback: 'mm' })],
    [bot.inlineButton('–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', { callback: 'refs' })],
]);

const RM_balance = bot.keyboard([
    [bot.button('üí∏ –í—ã–≤–µ—Å—Ç–∏')],
    [bot.button('‚óÄÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é')]], { resize: true });

const RM_back = bot.keyboard([[bot.button('‚óÄÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é')]], { resize: true });

bot.on('text', async function (msg) {
    var uid = msg.from.id
    var utext = msg.text
    if (utext == "/start") {
        let isUser = await User.find({ id: uid })
        if (isUser.length == 0) {
            let user = new User({ id: uid, username: msg.from.username, name: msg.from.first_name, ref: 0, balance: 0, ref_count: 0 })
            await user.save()
        }
        bot.sendMessage(uid, start_text, { replyMarkup: RM_default, parseMode: 'html' });
    }
    else if (utext == "üí∞ –ë–∞–ª–∞–Ω—Å") {
        bot.sendMessage(uid, 'üí∞ –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ <b>' + roundPlus(await getBal(uid)) + ' </b>—Ä—É–±–ª–µ–π!', { replyMarkup: RM_balance, parseMode: 'html' })
    }
    else if (utext == "üöÄ –ó–∞—Ä–∞–±–æ—Ç–æ–∫")
        bot.sendMessage(uid, 'üöÄ <b>–ó–∞—Ä–∞–±–æ—Ç–æ–∫</b>\n\nüó£ –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –í–∞–º <b>–∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å</b> –Ω–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!\n\nüí∏ –ú—ã –ø–ª–∞—Ç–∏–º <b>25 –∫–æ–ø–µ–µ–∫</b> –∑–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞!\n\nüë• <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\nhttp://t.me/slivmens?start=' + uid + '\n\nüì¢ –†–∞–∑–º–µ—â–∞–π—Ç–µ –í–∞—à—É —Å—Å—ã–ª–∫—É –≤ –∫–∞–Ω–∞–ª–∞—Ö, –∫–∞—Ç–∞–ª–æ–≥–∞—Ö, –±–æ—Ç–∞—Ö, —á–∞—Ç–∞—Ö –∏ –ø–æ–ª—É—á–∞–π—Ç–µ <b>–ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥</b>!\n\n', { replyMarkup: RM_default, parseMode: 'html', webPreview: false });

    else if (utext == "/admin" && uid == a1 || utext == "/admin" && uid == a2)
        bot.sendMessage(uid, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∫—É!', { replyMarkup: RM_admin, parseMode: 'html', webPreview: false });


    else if (utext == "üìä C—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞") {
        var c = await User.count({})
        var rc = await User.count({ ref: uid })

        bot.sendMessage(uid, 'üìä *C—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:*\n\nüë• –í—ã –ø—Ä–∏–≤–ª–µ–∫–ª–∏ *' + rc + '* —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\nüíµ –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ *' + roundPlus(rc * 0.25) + '* —Ä—É–±–ª–µ–π\nüë® –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *' + c + '*\nüí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Å–µ–≥–æ: *' + roundPlus((483 + c * 0.3)) + ' —Ä—É–±–ª–µ–π*', { replyMarkup: RM_default, parseMode: 'markdown', webPreview: false })
    }

    else if (utext == "üí¨ –ù–∞—à —á–∞—Ç")
        bot.sendMessage(uid, 'Ô∏èüí¨ <b>–ü—Ä–∏–≥–ª–∞—à–∞–µ–º</b> –í–∞—Å –≤ –Ω–∞—à <b>—á–∞—Ç</b>: \n\nhttps://t.me/slivmens', { parseMode: 'html', webPreview: true });

    else if (utext == "üì¢ –†–µ–∫–ª–∞–º–∞") {
        var c = await User.count({})
        bot.sendMessage(uid, 'Ô∏èüí¨ <b>–†–∞—Å—Å—ã–ª–∫–∞</b> –Ω–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ —Å—Ç–æ–∏—Ç <b>' + 50 + '</b> —Ä—É–±–ª–µ–π.\n\nüôÇ –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–µ–∫–ª–∞–º—ã - @kredo_admin\nüôÉ –î–ª—è —Ç–µ—Ö, —É –∫–æ–≥–æ –±–∞–Ω - @kredo_bot', { parseMode: 'html', webPreview: true });
    }

    else if (utext == "‚óÄÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é") {
        bot.sendMessage(uid, '–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é', { replyMarkup: RM_default });
        balAdd_ctrl = 0
        balAdd_id = undefined
        mm_ctrl = false
        state[uid] = 0
    }
    else if (utext != "‚óÄÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é" && state[uid] == 10) {
        var id = Number(msg.text)
      var user = await User.findOne({id: id})
      var refs = await User.find({ref: id}, {name: 1, username: 1, ref_count: 1}).limit(100)
      var str =  user.ref_count+" —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @"+user.username+':\n\n'
      for(var i=0; i<refs.length;i++)
          str += refs[i].name+" - @"+refs[i].username+' - '+refs[i].ref_count+' —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n'
      bot.sendMessage(uid, str)
    }
    

    else if (utext == "üí∏ –í—ã–≤–µ—Å—Ç–∏") {
        state[uid] = -1
        return bot.sendMessage(uid, 'üê• –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –í–∞—à–µ–≥–æ *QIWI, –Ø–Ω–¥–µ–∫—Å.–î–µ–Ω—å–≥–∏, WebMoney –∏–ª–∏ Payeer* –∫–æ—à–µ–ª—å–∫–∞:', { replyMarkup: RM_back, parseMode: 'markdown' });
    }
    else if (state[uid] == -1) {
        qiwi_n[uid] = utext
        var isUser = await User.find({ id: uid })
        var balance = Number(isUser[0].balance)
        bot.sendMessage(uid, 'üí∞ –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ *' + balance + ' *—Ä—É–±–ª–µ–π\n\n–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:', { replyMarkup: RM_back, parseMode: 'markdown' })
        state[uid] = -2
    }
    else if (state[uid] == -2) {
        var qiwi_num = qiwi_n[uid]
        var isUser = await User.find({ id: uid })
        var balance = Number(isUser[0].balance)
        var wd_sum = utext
        if (wd_sum <= balance && isNaN(wd_sum) == false && wd_sum >= 25) {
            User.findOneAndUpdate({ 'id': uid }, { 'balance': balance - wd_sum }, { upsert: true }, function (err, doc) { })
            bot.sendMessage(a1, 'üì§*–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥!*üì§\n\n–ö–æ—à–µ–ª—ë–∫: `' + qiwi_num + '`\n–°—É–º–º–∞: `' + wd_sum + '`\nID: `' + uid + '`', { replyMarkup: RM_back, parseMode: 'markdown' })
            bot.sendMessage(uid, '–ö–æ—à–µ–ª—ë–∫: `' + qiwi_num + '`\n–°—É–º–º–∞: `' + wd_sum + '`\n\nüí∏–í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ *24-—Ö* —á–∞—Å–æ–≤!', { replyMarkup: RM_default, parseMode: 'markdown' })

        }
        else
            bot.sendMessage(uid, '‚ùóÔ∏è*–û—à–∏–±–∫–∞*‚ùóÔ∏è\n\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–ª–∏ —Å—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã –º–µ–Ω–µ–µ 25 —Ä—É–±–ª–µ–π!\n–£–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—É–º–º—É:', { replyMarkup: RM_back, parseMode: 'markdown' })
    }


})

bot.on(/^\/start (.+)$/, async function (msg, props) {
    var uid = msg.from.id
    const ref = Number(props.match[1]);
    var isUser = await User.find({ id: uid })

    if (isUser.length == 0) {
        bot.sendMessage(uid, start_text, { replyMarkup: RM_default, parseMode: 'markdown' });
        let user = new User({ id: uid, username: msg.from.username, name: msg.from.first_name, ref: ref, balance: 0, ref_count: 0 })
        user.save().then(() => {
            addBal(ref, 0.25)
            addRef(ref)
            bot.sendMessage(ref, "üí∏ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>25 –∫–æ–ø–µ–µ–∫</b> –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ä–µ—Ñ–µ—Ä–∞–ª–∞!", { parseMode: "html" })
        })
    }
    bot.sendMessage(uid, start_text, { replyMarkup: RM_default, parseMode: 'html' });
});

bot.on('callbackQuery', async (msg) => {
    var d = msg.data
    var uid = msg.from.id
    if (uid == a1 || uid == a2) {
        if (d == "mm")
            bot.sendMessage(uid, "–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
            if (d == "refs")
            {
                bot.sendMessage(uid, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
                state[uid]=10;
            }
        bot.answerCallbackQuery(msg.id, `Inline button callback: ${msg.data}`, true);
    }
});

bot.on("forward", async (msg, props) => {
    var uid = msg.from.id
    if (uid == a1 || uid == a2)
        bot.sendMessage(uid, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!").then((e) => {
            mm(msg.forward_from_chat.id, msg.forward_from_message_id, e.message_id)
			console.log(msg)
        })
});

bot.start()
